{
  "id": "worksheet-4",
  "title": "Worksheet 4: Making Decisions",
  "description": "Learn to use if, elif, and else statements to create programs that can make choices and respond to different conditions.",
  "problems": [
    {
      "title": "Greater Than (print‑debug)",
      "content": "In programming, an \"if\" lets your code decide what to do. Before we decide, we can print helpful clues (debug prints). The first print shows the number. The second print shows whether the test is True or False.",
      "task": "Run the code. Then change age to 3, 5, or 7 and run again. Read the two debug lines to predict whether the message will appear.",
      "codeHeight": 8,
      "starterCode": "age = 6\nprint(age)              # debug: see the value\nprint(age > 5)          # debug: see the test result\n\nif age > 5:\n  print(\"OK\")",
      "hint": "The boolean line (True/False) tells you if the if-block will run.",
      "validation": {
        "rules": [
          { "type": "no_errors" },
          { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*age\\s*\\)" },
          { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*age\\s*>\\s*5\\s*\\)" },
          { "type": "code_contains_regex", "pattern": "if\\s*age\\s*>\\s*5\\s*:" }
        ]
      }
    },
    {
      "title": "Less Than (print‑debug)",
      "content": "Now try the < (less than) comparison. We’ll keep the same style of debug prints so you can see the value and the test result.",
      "task": "Run the code. Change toys to 2, 5, or 8 and run again. Which values make the message print?",
      "codeHeight": 8,
      "starterCode": "toys = 4\nprint(toys)             # debug\nprint(toys < 5)         # debug\n\nif toys < 5:\n  print(\"Few\")",
      "hint": "Try a number right on the edge (5).",
      "validation": {
        "rules": [
          { "type": "no_errors" },
          { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*toys\\s*\\)" },
          { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*toys\\s*<\\s*5\\s*\\)" },
          { "type": "code_contains_regex", "pattern": "if\\s*toys\\s*<\\s*5\\s*:" }
        ]
      }
    },
    {
      "title": "Equal To == (print‑debug)",
      "content": "One equals (=) gives a value to a variable. Two equals (==) asks a question: are these equal? The debug prints show the value and whether the equality test is True or False.",
      "task": "Run the code. Change target to 6, 7, or 9 and run again. When does the message appear?",
      "codeHeight": 8,
      "starterCode": "target = 7\nprint(target)           # debug\nprint(target == 7)      # debug\n\nif target == 7:\n  print(\"Win\")",
      "hint": "Remember: == is a question; = is assignment.",
      "validation": {
        "rules": [
          { "type": "no_errors" },
          { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*target\\s*\\)" },
          { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*target\\s*==\\s*7\\s*\\)" },
          { "type": "code_contains_regex", "pattern": "if\\s*target\\s*==\\s*7\\s*:" }
        ]
      }
    },
    {
      "title": "Fix the bug (= vs ==)",
      "content": "This program has a common bug: using = inside an if. Run it to see the error, then fix it so the program checks equality correctly.",
      "task": "Fix the if-line to use == so the message prints.",
      "codeHeight": 6,
      "starterCode": "choice = 5\n\nif choice = 5:\n  print(\"Fixed!\")",
      "hint": "Inside an if you need two equals signs: ==.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "choice = 5\nif choice == 5:\n  print(\"Fixed!\")",
            "maxRuns": 3
          }
        ]
      }
    },
    {
      "title": "Add an else (with input)",
      "content": "Sometimes the condition is False. An else gives us the \"other path\". We’ll also keep the debug prints so you can see what’s happening.",
      "task": "Enter a number. If it’s greater than 5 you’ll see \"High\". Otherwise you’ll see \"Low\". Try 4 and 6 to see both paths.",
      "inputs": [ { "name": "n", "label": "Number:", "type": "number" } ],
      "codeHeight": 10,
      "starterCode": "n = get_input()\nprint(n)                # debug\nprint(n > 5)            # debug\n\nif n > 5:\n  print(\"High\")\nelse:\n  print(\"Low\")",
      "hint": "Only one branch runs each time.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "n = get_input()\nprint(n)\nprint(n > 5)\nif n > 5:\n  print(\"High\")\nelse:\n  print(\"Low\")",
            "maxRuns": 4,
            "testInputs": [ { "inputs": { "n": 4 } }, { "inputs": { "n": 6 } } ]
          }
        ]
      }
    },
    {
      "title": "Input + tiny numbers (explore)",
      "content": "Use an input box (no big strings needed). The debug prints help you predict which branch will run.",
      "task": "Enter 3, 5, or 7 and see how the boolean line guides the branch.",
      "inputs": [ { "name": "n", "label": "Number:", "type": "number" } ],
      "codeHeight": 10,
      "starterCode": "n = get_input()\nprint(n)                # debug\nprint(n < 5)            # debug\n\nif n < 5:\n  print(\"Small\")",
      "hint": "Try values on both sides of 5.",
      "validation": {
        "rules": [
          { "type": "no_errors" },
          { "type": "code_contains_regex", "pattern": "get_input\\s*\\(" },
          { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*n\\s*<\\s*5\\s*\\)" },
          { "type": "code_contains_regex", "pattern": "if\\s*n\\s*<\\s*5\\s*:" }
        ]
      }
    },
    {
      "title": "Boundary: make > into >=",
      "content": "Is 5 included or excluded? Change the comparison to include 5. Keep the debug prints so you can see the difference.",
      "task": "Edit the if so that 5 also passes (use >=).",
      "codeHeight": 10,
      "starterCode": "score = 5\nprint(score)            # debug\nprint(score > 5)        # debug\n\nif score > 5:\n  print(\"Pass\")\nelse:\n  print(\"Try\")",
      "hint": "Replace > with >= in the if-line.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "score = 5\nprint(score)\nprint(score >= 5)\nif score >= 5:\n  print(\"Pass\")\nelse:\n  print(\"Try\")",
            "maxRuns": 2
          }
        ]
      }
    },
    {
      "title": "Two buttons: if/else",
      "content": "Buttons mean less typing. Click a button; the program checks which one you chose.",
      "task": "Run, click button 1 or 2, then run again and choose the other button.",
      "codeHeight": 8,
      "starterCode": "choice = get_choice(2)\n\nif choice == 1:\n  print(\"Left\")\nelse:\n  print(\"Right\")",
      "hint": "`get_choice(2)` returns 1 for the first button or 2 for the second.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "choice = get_choice(2)\nif choice == 1:\n  print(\"Left\")\nelse:\n  print(\"Right\")",
            "maxRuns": 6
          }
        ]
      }
    },
    {
      "title": "Three-way with elif (input)",
      "content": "Now add a middle path with elif. The first true branch wins and the rest are skipped.",
      "task": "Enter numbers like 2, 3, 5, and 6 to see Low/Mid/High.",
      "inputs": [ { "name": "n", "label": "Number:", "type": "number" } ],
      "codeHeight": 10,
      "starterCode": "n = get_input()\n\nif n < 3:\n  print(\"Low\")\nelif n < 6:\n  print(\"Mid\")\nelse:\n  print(\"High\")",
      "hint": "Check the smaller test first.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "n = get_input()\nif n < 3:\n  print(\"Low\")\nelif n < 6:\n  print(\"Mid\")\nelse:\n  print(\"High\")",
            "maxRuns": 6,
            "testInputs": [ { "inputs": { "n": 2 } }, { "inputs": { "n": 5 } }, { "inputs": { "n": 6 } } ]
          }
        ]
      }
    },
    {
      "title": "Buttons + elif (menu)",
      "content": "Use three buttons to choose a path. Each button prints a short label.",
      "task": "Run three times and click 1, then 2, then 3 to see A, B, C.",
      "codeHeight": 10,
      "starterCode": "c = get_choice(3)\n\nif c == 1:\n  print(\"A\")\nelif c == 2:\n  print(\"B\")\nelse:\n  print(\"C\")",
      "hint": "elif means \"else if\" — a second check.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "c = get_choice(3)\nif c == 1:\n  print(\"A\")\nelif c == 2:\n  print(\"B\")\nelse:\n  print(\"C\")",
            "maxRuns": 6
          }
        ]
      }
    }
  ]
}
