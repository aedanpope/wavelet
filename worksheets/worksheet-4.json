{
  "id": "worksheet-4",
  "title": "Worksheet 4: Making Decisions",
  "description": "Learn to use if, elif, and else statements to create programs that can make choices and respond to different conditions.",
  "problems": [
    {
      "title": "Greater Than >",
      "content": "So far, our programs have always run the same way. But what if we want our code to make decisions? The <code>if</code> statement runs code only when a condition is true. We can use math symbols like <code>></code> (greater than) to create these conditions.",
      "task": "Run the code. Then, change the number in the <code>age</code> variable to 3 and run it again. Notice how the <code>True</code>/<code>False</code> line changes and predicts whether 'OK' will be printed.",
      "codeHeight": 6,
      "starterCode": "age = 6\nprint(age > 5)   # This line shows if the condition is True or False\n\nif age > 5:\n  print(\"OK\")",
      "hint": "The code inside the `if` block only runs when the condition next to the `if` is `True`.",
      "validation": { "rules": [{ "type": "no_errors" }, { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*age\\s*>\\s*5\\s*\\)" }, { "type": "code_contains_regex", "pattern": "if\\s*age\\s*>\\s*5\\s*:" }] }
    },
    {
      "title": "Less Than <",
      "content": "Just like we use <code>></code> for 'greater than', we can use <code><</code> for 'less than'. Let's use our debug print to see how it works.",
      "task": "Run the code. Then, change the number of <code>toys</code> to 5 and run it again. What happens when <code>toys < 5</code> is <code>False</code>?",
      "codeHeight": 6,
      "starterCode": "toys = 4\nprint(toys < 5)   # Is the number of toys less than 5?\n\nif toys < 5:\n  print(\"Not too many toys\")",
      "hint": "Try the number 5. Is 5 less than 5? The debug line will tell you!",
      "validation": { "rules": [{ "type": "no_errors" }, { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*toys\\s*<\\s*5\\s*\\)" }, { "type": "code_contains_regex", "pattern": "if\\s*toys\\s*<\\s*5\\s*:" }] }
    },
    {
      "title": "Equal To ==",
      "content": "This is a very important one! To ask if two things are equal, we use two equals signs: <code>==</code>. A single equals sign <code>=</code> is for giving a value to a variable.",
      "task": "Run the code. Change the <code>secret_number</code> to 6 and run it again. Watch the <code>True</code>/<code>False</code> line to predict the result.",
      "codeHeight": 6,
      "starterCode": "secret_number = 7\nprint(secret_number == 7)  # Is the secret number equal to 7?\n\nif secret_number == 7:\n  print(\"You guessed it\")",
      "hint": "Remember: one equals `=` gives a value, two equals `==` asks a question.",
      "validation": { "rules": [{ "type": "no_errors" }, { "type": "code_contains_regex", "pattern": "print\\s*\\(\\s*secret_number\\s*==\\s*7\\s*\\)" }, { "type": "code_contains_regex", "pattern": "if\\s*secret_number\\s*==\\s*7\\s*:" }] }
    },
    {
      "title": "Fix the Bug! (= vs ==)",
      "content": "Oh no! A classic bug. This program uses a single <code>=</code> inside the <code>if</code> statement, which causes an error. This is one of the most common mistakes for new programmers!",
      "task": "Run the code to see the error. Then, fix the bug by changing the single <code>=</code> to a double <code>==</code> so the program works correctly.",
      "codeHeight": 4,
      "starterCode": "choice = 5\n\nif choice = 5:\n  print(\"Bug fixed\")",
      "hint": "To ask a question inside an `if` statement, you need two equals signs: `==`.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "choice = 5\nif choice == 5:\n  print(\"Bug fixed\")" }] }
    },
    {
      "title": "Greater Than or Equal To >=",
      "content": "What if you want to include the number in your check? You can use <code>>=</code> which means 'greater than or equal to'.",
      "task": "Run the code with the score set to 50. It says 'Try again'. Change the <code>></code> to <code>>=</code> so that a score of 50 is also a pass.",
      "codeHeight": 6,
      "starterCode": "score = 50\n\nif score > 50:\n  print(\"You passed\")\nelse:\n  print(\"Try again\")",
      "hint": "Just add an equals sign `=` after the greater than sign `>`.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "score = 50\nif score >= 50:\n  print(\"You passed\")\nelse:\n  print(\"Try again\")" }] }
    },
    {
      "title": "Adding an else",
      "content": "What if we want to do something when the <code>if</code> condition is *not* true? We can add an <code>else</code> block. The code in the <code>else</code> block only runs if the <code>if</code> condition is `False`.",
      "task": "Enter different numbers to see both paths. If you enter a number greater than 10, 'Big number' prints. For any other number, 'Small number' prints.",
      "inputs": [ { "name": "n", "label": "Number:", "type": "number" } ],
      "codeHeight": 6,
      "starterCode": "n = get_input()\n\nif n > 10:\n  print(\"Big number\")\nelse:\n  print(\"Small number\")",
      "hint": "The `if` block and the `else` block are like two different paths. The program will only ever go down one of them.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "n = get_input()\nif n > 10:\n  print(\"Big number\")\nelse:\n  print(\"Small number\")" }] }
    },
    {
      "title": "Two Buttons",
      "content": "Let's use buttons instead of typing numbers! The function <code>get_choice(2)</code> shows two buttons. It gives back the number 1 for the first button and 2 for the second.",
      "task": "Run the code. Click the first button. Then run it again and click the second button to see the different messages.",
      "interactionType": "buttons",
      "codeHeight": 6,
      "starterCode": "choice = get_choice(2)\n\nif choice == 1:\n  print(\"Left path\")\nelse:\n  print(\"Right path\")",
      "hint": "`get_choice(2)` pauses the program and waits for you to click a button.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "choice = get_choice(2)\nif choice == 1:\n  print(\"Left path\")\nelse:\n  print(\"Right path\")" }] }
    },
    {
      "title": "Your Turn: Add an else",
      "content": "Here is a program with an <code>if</code> statement, but it's missing the <code>else</code> part. Let's add it!",
      "task": "The code below only prints a message if you have enough coins. Add an <code>else</code> block that prints 'Not enough coins' if the condition is false.",
      "codeHeight": 6,
      "starterCode": "coins = 15\n\nif coins > 20:\n  print(\"Can buy item\")",
      "hint": "Add `else:` on a new line (make sure it lines up with `if`). Then add your new print statement indented underneath it.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "coins = 15\n\nif coins > 20:\n  print(\"Can buy item\")\nelse:\n  print(\"Not enough coins\")" }] }
    },
    {
      "title": "More Than Two Choices: elif",
      "content": "What if we have more than two options? We can use <code>elif</code>, which is short for 'else if'. It lets us check another condition.",
      "task": "Enter numbers like 2, 5, and 8. See how the program prints 'Low', 'Mid', or 'High' depending on the number.",
      "inputs": [ { "name": "n", "label": "Number:", "type": "number" } ],
      "codeHeight": 7,
      "starterCode": "n = get_input()\n\nif n < 3:\n  print(\"Low\")\nelif n < 6:\n  print(\"Mid\")\nelse:\n  print(\"High\")",
      "hint": "The program checks each condition from top to bottom. As soon as one is true, it runs that code and skips the rest.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "n = get_input()\nif n < 3:\n  print(\"Low\")\nelif n < 6:\n  print(\"Mid\")\nelse:\n  print(\"High\")" }] }
    },
    {
      "title": "Your Turn: Add an elif",
      "content": "Let's practice by adding another choice to an existing program. This treasure hunt has three options, but we want to add a fourth!",
      "task": "We've added a fourth treasure chest. First, change <code>get_choice(3)</code> to <code>get_choice(4)</code>. Then, add a new <code>elif</code> that checks if the choice is 3 and prints 'Found a map'.",
      "interactionType": "buttons",
      "codeHeight": 8,
      "starterCode": "choice = get_choice(3)\n\nif choice == 1:\n  print(\"Found gold coins\")\nelif choice == 2:\n  print(\"Found a rusty sword\")\nelse:\n  print(\"A dragon pops out\")",
      "hint": "Your new `elif choice == 3:` block should go just before the final `else:`.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "choice = get_choice(4)\n\nif choice == 1:\n  print(\"Found gold coins\")\nelif choice == 2:\n  print(\"Found a rusty sword\")\nelif choice == 3:\n  print(\"Found a map\")\nelse:\n  print(\"A dragon pops out\")" }] }
    },
    {
      "title": "The Drink Machine",
      "content": "Your turn to build a program with multiple choices from scratch!",
      "task": "Write a program that uses <code>get_choice(3)</code> to simulate a drink machine. <br>If choice is 1, print 'Water'.<br>If choice is 2, print 'Juice'.<br>For any other choice, print 'Lemonade'.",
      "interactionType": "buttons",
      "codeHeight": 6,
      "starterCode": "",
      "hint": "You will need one `if`, one `elif`, and one `else`. Look at the code from the previous two problems for help.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "choice = get_choice(3)\nif choice == 1:\n  print(\"Water\")\nelif choice == 2:\n  print(\"Juice\")\nelse:\n  print(\"Lemonade\")" }] }
    },
    {
      "title": "Quiz Question",
      "content": "You can use decision-making to create a simple quiz. We can print a question and then use <code>get_choice()</code> to get the user's answer.",
      "task": "Write a program that asks a quiz question and provides three multiple-choice answers using <code>get_choice(3)</code>.<br>The question is: \"What is 10 + 5?\"<br>The choices are: 1) 12, 2) 15, 3) 20.<br>Your program should print \"Correct\" for the right answer, and \"Not quite\" for the wrong ones.",
      "interactionType": "buttons",
      "codeHeight": 7,
      "starterCode": "print(\"What is 10 + 5?\")\nprint(\"1) 12\")\nprint(\"2) 15\")\nprint(\"3) 20\")\n",
      "hint": "The correct answer is choice 2. You can use an `if choice == 2:` block for the correct message and an `else` block for the incorrect message.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "print(\"What is 10 + 5?\")\nprint(\"1) 12\")\nprint(\"2) 15\")\nprint(\"3) 20\")\n\nchoice = get_choice(3)\nif choice == 2:\n  print(\"Correct\")\nelse:\n  print(\"Not quite\")" }] }
    },
    {
      "title": "Magic Potions",
      "content": "Decisions can change the value of variables! This is how games keep track of things like health or score. The line <code>health = health + 5</code> takes the current value of health, adds 5, and then saves the result back into the health variable.",
      "task": "Complete the program. Add an <code>else</code> block that subtracts 3 from health if the second choice is picked.",
      "interactionType": "buttons",
      "codeHeight": 8,
      "starterCode": "health = 10\nprint(\"Your health is 10\")\nchoice = get_choice(2)\n\nif choice == 1:\n  health = health + 5\n\nprint(\"Your health is now\", health)",
      "hint": "Add an `else:` block. Inside it, write the line `health = health - 3`.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "health = 10\nprint(\"Your health is 10\")\nchoice = get_choice(2)\n\nif choice == 1:\n  health = health + 5\nelse:\n  health = health - 3\n\nprint(\"Your health is now\", health)" }] }
    },
    {
      "title": "Two Conditions with 'and'",
      "content": "Sometimes you need to check if two things are true at the same time. For this, we can use the word <code>and</code>. The code inside the <code>if</code> will only run if the condition on the left AND the condition on the right are both true.",
      "task": "Run this code. Try changing the variables. For the message to print, <code>age</code> must be 12 or more AND <code>has_ticket</code> must be `True`.",
      "codeHeight": 6,
      "starterCode": "age = 14\nhas_ticket = True\n\nif age >= 12 and has_ticket == True:\n  print(\"Welcome to the movie\")",
      "hint": "If you change age to 10, the first part is false, so the message won't print. If you change `has_ticket` to `False`, the second part is false, so it also won't print.",
      "validation": { "rules": [{ "type": "code_contains", "pattern": "and" }] }
    },
    {
      "title": "Secret Password",
      "content": "Let's use the <code>and</code> operator to check two inputs from the user.",
      "task": "Write a program that asks for a number and a code. If the number is 7 AND the code is 123, print 'Access granted'. Otherwise, print 'Access denied'.",
      "inputs": [ { "name": "num", "label": "Number:", "type": "number" }, { "name": "code", "label": "Code:", "type": "number" } ],
      "codeHeight": 6,
      "starterCode": "num = get_input('num')\ncode = get_input('code')\n",
      "hint": "Your `if` statement will look like this: `if num == 7 and code == 123:`.",
      "validation": { 
        "rules": [{ 
          "type": "solution_code", 
          "solutionCode": "num = get_input('num')\ncode = get_input('code')\nif num == 7 and code == 123:\n  print('Access granted')\nelse:\n  print('Access denied')",
          "testInputs": [
            {"inputs": {"num": 7, "code": 123}, "expectedOutput": "Access granted"},
            {"inputs": {"num": 5, "code": 123}, "expectedOutput": "Access denied"},
            {"inputs": {"num": 7, "code": 456}, "expectedOutput": "Access denied"},
            {"inputs": {"num": 12, "code": 43}, "expectedOutput": "Access denied"}
          ]
        }] 
      }
    },
    {
      "title": "Finding the Remainder %",
      "content": "In programming, there's a special math symbol called **modulo**, which is a percent sign <code>%</code>. It gives you the remainder of a division. For example, if you share 10 sweets between 3 friends, each gets 3 and there is 1 left over. So, <code>10 % 3</code> is 1.",
      "task": "Run the code to see the remainder of 14 divided by 4. Change the numbers to see how it works with different values.",
      "codeHeight": 2,
      "starterCode": "print(14 % 4)",
      "hint": "14 divided by 4 is 3 with a remainder of 2.",
      "validation": { "rules": [{ "type": "code_contains", "pattern": "%" }] }
    },
    {
      "title": "Even or Odd?",
      "content": "We can use the modulo operator <code>%</code> to see if a number is even or odd. Any even number can be divided by 2 with no remainder! So, if <code>number % 2</code> is 0, the number is even.",
      "task": "Enter different numbers, both even and odd, and run the code to see if the program gets it right.",
      "inputs": [{ "name": "num", "label": "Number:", "type": "number" }],
      "codeHeight": 6,
      "starterCode": "number = get_input()\n\nif number % 2 == 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
      "hint": "Try entering 10, then try 5. See how the result of `number % 2` changes the outcome.",
      "validation": { "rules": [{ "type": "code_contains_regex", "pattern": "number\\s*%\\s*2\\s*==\\s*0" }] }
    },
    {
      "title": "Loop with Modulo",
      "content": "Let's combine loops from Worksheet 3 with the modulo operator we just learned! This program loops through numbers from 1 to 20 and uses an <code>if</code> statement to check which ones are multiples of 3.",
      "task": "Run the code to see it print all the multiples of 3. Then, change the code to print the multiples of 4 instead.",
      "codeHeight": 5,
      "starterCode": "for i in range(1, 21):\n  if i % 3 == 0:\n    print(i)",
      "hint": "You only need to change one number in the `if` statement.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "for i in range(1, 21):\n  if i % 4 == 0:\n    print(i)" }] }
    },
    {
      "title": "Challenge: Dance Party",
      "content": "Now that you've practiced loops and decisions, let's combine them to create an interactive dance sequence!",
      "task": "Write a program that uses a <code>for</code> loop to run 4 times. Inside the loop, use <code>get_choice(3)</code> to pick a dance move ('Spin', 'Jump', or 'Wiggle') and print a message for each move.",
      "interactionType": "buttons",
      "codeHeight": 8,
      "starterCode": "",
      "hint": "Use `for i in range(4):`. Inside that loop, get a choice and use an `if/elif/else` structure to print the chosen move.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "for i in range(4):\n  choice = get_choice(3)\n  if choice == 1:\n    print(\"You spin around\")\n  elif choice == 2:\n    print(\"You jump up high\")\n  else:\n    print(\"You wiggle\")" }] }
    },
    {
      "title": "Challenge: FizzBuzz Intro",
      "content": "This is a classic programming challenge! The goal is to loop through numbers and print 'Fizz' for multiples of 3. It's a great way to practice loops and the modulo operator.",
      "task": "Write a program that loops from 1 to 20. Inside the loop, if a number is a multiple of 3, print 'Fizz'. Otherwise, just print the number itself.",
      "codeHeight": 6,
      "starterCode": "",
      "hint": "Use a `for` loop and an `if/else` statement. The condition to check is `i % 3 == 0`.",
      "validation": { "rules": [{ "type": "solution_code", "solutionCode": "for i in range(1, 21):\n  if i % 3 == 0:\n    print('Fizz')\n  else:\n    print(i)" }] }
    },
    {
      "title": "Creative Challenge",
      "content": "You've learned about variables, loops, and now decisions! These are the three main building blocks of almost every program. Now it's your turn to combine them in a creative way.",
      "task": "Create your own interesting program. It could be a simple game, an interactive story, or a cool calculator. Use at least one variable, one loop, and one <code>if</code> statement. Be creative!",
      "interactionType": "buttons",
      "inputs": [{ "name": "x", "label": "Input X:", "type": "number" }],
      "codeHeight": 8,
      "starterCode": "",
      "hint": "You could make a guessing game with limited lives, a story where choices affect your score, or a program that asks for a number and then draws a pattern of that size.",
      "validation": { "rules": [{ "type": "code_contains", "pattern": "=" }, { "type": "code_contains", "pattern": "for " }, { "type": "code_contains", "pattern": "if " }, { "type": "output_not_empty" }] }
    }
  ]
}