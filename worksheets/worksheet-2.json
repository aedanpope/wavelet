{
  "id": "worksheet-2",
  "title": "Worksheet 2: Storing Your Numbers",
  "description": "Learn to use variables to store and manipulate data in Python.",
  "problems": [
    {
      "title": "Your first variable",
      "content": "Variables are containers that hold values. Think of them like labeled boxes - you put something inside and give it a name. Let's create your first variable! Here we're creating a variable named 'age' and giving it the value 7. The equals sign (=) assigns the value to the variable.",
      "task": "Run the code to see the value stored in the variable.",
      "starterCode": "age = 7\nprint(age)",
      "hint": "The variable 'age' holds the number 7.",
      "validation": {
        "rules": [
          {
            "type": "code_contains_regex",
            "pattern": "age\\s*=\\s*7"
          },
          {
            "type": "code_contains_regex",
            "pattern": "print\\s*\\(\\s*age\\s*\\)"
          },
          {
            "type": "solution_code",
            "solutionCode": "age = 7\nprint(age)"
          }
        ]
      }
    },
    {
      "title": "Changing a variable",
      "content": "You can change what a variable stores by giving it a new value. Try setting the age to your own age for fun!",
      "task": "Change the age to your own age and run the code to see the updated value.",
      "starterCode": "age = 100\nprint(age)",
      "hint": "Surely you're less than 100! Change the number to your actual age.",
      "validation": {
        "rules": [
          {
            "type": "code_contains_regex",
            "pattern": "age\\s*=\\s*\\d+"
          },
          {
            "type": "output_contains_regex",
            "pattern": "^(?!100\\n$).+",
            "description": "Output must not be 100"
          }
        ]
      }
    },
    {
      "title": "Two variables",
      "content": "Variables can store different values and be used together.",
      "task": "Run the code to see both values printed.",
      "codeHeight": 4,
      "starterCode": "apples = 5\nbananas = 3\nprint(apples)\nprint(bananas)",
      "hint": "Each print shows the value of one variable.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "apples = 5\nbananas = 3\nprint(apples)\nprint(bananas)"
          }
        ]
      }
    },
    {
      "title": "Variables in calculations",
      "content": "You can use variables in calculations.",
      "task": "Run the code to see the sum of apples and bananas.",
      "codeHeight": 4,
      "starterCode": "apples = 5\nbananas = 3\ntotal = apples + bananas\nprint(total)",
      "hint": "Variables work like numbers in math.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "apples = 5\nbananas = 3\ntotal = apples + bananas\nprint(total)"
          }
        ]
      }
    },
    {
      "title": "Edit the numbers",
      "content": "Change the numbers in the variables so the total is 20.",
      "task": "Edit the code to make total = 20.",
      "codeHeight": 4,
      "starterCode": "apples = 5\nbananas = 3\ntotal = apples + bananas\nprint(total)",
      "hint": "Adjust apples and bananas to add up to 20.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "apples = 12\nbananas = 8\ntotal = apples + bananas\nprint(total)"
          }
        ]
      }
    },
    {
      "title": "Getting input from the user",
      "content": "In this problem, we'll use the <code>get_input()</code> command to get a value from the input text box.",
      "task": "There is a box to the right called 'x', enter a number and run the code to see how get_input() works.",
      "inputs": [
        {
          "name": "x",
          "label": "Enter a number:",
          "type": "number"
        }
      ],
      "starterCode": "x = get_input()\nprint(x)",
      "hint": "When there's only one input box, you can use <code>get_input()</code> without any arguments to get its value.",
      "validation": {
        "rules": [
          {
            "type": "code_contains_regex",
            "pattern": "get_input\\s*\\(\\s*\\)"
          }
        ]
      }
    },
    {
      "title": "Calculating with input",
      "content": "Now let's do a calculation with the user input. We can use the input value in math operations just like any other number.",
      "task": "Enter a number and run the code to see the input plus 5.",
      "inputs": [
        {
          "name": "x",
          "label": "Enter a number:",
          "type": "number"
        }
      ],
      "starterCode": "x = get_input()\nprint(x + 5)",
      "hint": "The input value is added to 5 in the print statement.",
      "validation": {
        "rules": [
          {
            "type": "code_contains_regex",
            "pattern": "x\\s*\\+\\s*5"
          }
        ]
      }
    },
    {
      "title": "Modify the calculation",
      "content": "Your turn - modify the code to add 10 instead of 5 to the user input.",
      "task": "Edit the code to print the user input plus 10 instead of plus 5.",
      "inputs": [
        {
          "name": "x",
          "label": "Enter a number:",
          "type": "number"
        }
      ],
      "starterCode": "x = get_input()\nprint(x + 5)",
      "hint": "Change the 5 to 10 in the print statement.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input()\nprint(x + 10)"
          }
        ]
      }
    },
    {
      "title": "Double the input",
      "content": "Now you'll write code from scratch! Write a program that gets a number from the input and doubles it. Remember to use <code>*2</code> for multiplication.",
      "task": "Write code from scratch that doubles the user input.",
      "inputs": [
        {
          "name": "x",
          "label": "Enter a number:",
          "type": "number"
        }
      ],
      "starterCode": "",
      "hint": "Use <code>get_input()</code> to get the number, assign it to a variable, multiply by 2 using <code>*2</code>, then print the result.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input()\nresult = x * 2\nprint(result)"
          }
        ]
      }
    },
    {
      "title": "Square the input",
      "content": "Squaring a number means multiplying it by itself. For example, 5 squared is $5 Ã— 5 = 25$. In the program, we can write this as <code>x*x</code>.",
      "task": "Write code from scratch that squares the user input.",
      "inputs": [
        {
          "name": "x",
          "label": "Enter a number:",
          "type": "number"
        }
      ],
      "starterCode": "",
      "hint": "Use <code>get_input()</code> to get the number, then multiply it by itself using <code>x*x</code>.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input()\nresult = x * x\nprint(result)"
          }
        ]
      }
    },
    {
      "title": "Print input twice",
      "content": "Let's create a simple example where we print the user input twice.",
      "task": "Enter a number and run the code to see it printed twice.",
      "inputs": [
        {
          "name": "x",
          "label": "Enter a number:",
          "type": "number"
        }
      ],
      "starterCode": "x = get_input()\nprint(x)\nprint(x)",
      "hint": "The same variable is printed twice.",
      "validation": {
        "rules": [
          {
            "type": "code_contains_regex",
            "pattern": "print\\s*\\(\\s*x\\s*\\)"
          }
        ]
      }
    },
    {
      "title": "Multiple calculations",
      "content": "Now let's do multiple calculations with the same input. We'll print the input, then input+5, then input+10.",
      "task": "Write code from scratch that prints x, x+5, and x+10. You can look at previous questions for help.",
      "codeHeight": 5,
      "inputs": [
        {
          "name": "x",
          "label": "Enter a number:",
          "type": "number"
        }
      ],
      "starterCode": "",
      "hint": "Get the input, then use three print statements: one for x, one for x+5, and one for x+10.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input()\nprint(x)\nprint(x + 5)\nprint(x + 10)"
          }
        ]
      }
    },
    {
      "title": "Adding two inputs",
      "content": "Now let's get two numbers from the input boxes and add them together. We'll use <code>get_input()</code> twice to get both numbers. By default, <code>get_input()</code> will return just the value of the first input box, so we need to use <code>get_input('x')</code> and <code>get_input('y')</code> to get the values of the first and second input boxes respectively. The string input into <code>get_input()</code> is the name of the input box.",
      "task": "Input 2 numbers and run the code to see the sum.",
      "codeHeight": 5,
      "inputs": [
        {
          "name": "x",
          "label": "First number:",
          "type": "number"
        },
        {
          "name": "y",
          "label": "Second number:",
          "type": "number"
        }
      ],
      "starterCode": "x = get_input('x')\ny = get_input('y')\nresult = x + y\nprint(result)",
      "hint": "Use <code>get_input('x')</code> to get the first number and <code>get_input('y')</code> to get the second number.",
      "validation": {
        "rules": [
          {
            "type": "code_contains_regex",
            "pattern": "get_input\\s*\\(\\s*['\"]x['\"]\\s*\\)"
          },
          {
            "type": "code_contains_regex",
            "pattern": "get_input\\s*\\(\\s*['\"]y['\"]\\s*\\)"
          },
          {
            "type": "code_contains_regex",
            "pattern": "result\\s*=\\s*x\\s*\\+\\s*y"
          }
        ]
      }
    },
    {
      "title": "Make the sum 10",
      "content": "Now let's use the same code but you'll fill in the inputs so the output adds up to 10.",
      "task": "Fill in the inputs so the output is 10.",
      "codeHeight": 5,
      "inputs": [
        {
          "name": "x",
          "label": "First number:",
          "type": "number"
        },
        {
          "name": "y",
          "label": "Second number:",
          "type": "number"
        }
      ],
      "starterCode": "x = get_input('x')\ny = get_input('y')\nresult = x + y\nprint(result)",
      "hint": "Choose two numbers that add up to 10.",
      "validation": {
        "rules": [
          {
            "type": "output_contains",
            "pattern": "10"
          }
        ]
      }
    },
    {
      "title": "Fix the input bug",
      "content": "The value passed to the get_input() call must be the label on the input area. Can you see and fix the bug in this code?",
      "task": "Run this code to see the error, then fix the bug in the second get_input() function call so the program works correctly.",
      "codeHeight": 5,
      "inputs": [
        {
          "name": "x",
          "label": "First number:",
          "type": "number"
        },
        {
          "name": "y",
          "label": "Second number:",
          "type": "number"
        }
      ],
      "starterCode": "x = get_input('x')\ny = get_input('a')\nresult = x + y\nprint(result)",
      "hint": "Look at the input labels and make sure the get_input() calls use the correct names, the second one uses 'a' instead of 'y'.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input('x')\ny = get_input('y')\nresult = x + y\nprint(result)"
          }
        ]
      }
    },
    {
      "title": "Multiplying two inputs",
      "content": "Now let's modify the code to multiply the two numbers instead of adding them. You'll need to change the operation from addition to multiplication.",
      "task": "Edit the code to multiply the variables instead of adding them.",
      "codeHeight": 5,
      "inputs": [
        {
          "name": "x",
          "label": "First number:",
          "type": "number"
        },
        {
          "name": "y",
          "label": "Second number:",
          "type": "number"
        }
      ],
      "starterCode": "x = get_input('x')\ny = get_input('y')\nresult = x + y\nprint(result)",
      "hint": "Change the + to * to multiply instead of add.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input('x')\ny = get_input('y')\nresult = x * y\nprint(result)"
          }
        ]
      }
    },
    {
      "title": "Divide two inputs",
      "content": "Now let's write code from scratch to divide two inputs. Try lots of different inputs once you have the program working!",
      "task": "Write code from scratch that divides the first input by the second input.",
      "codeHeight": 5,
      "inputs": [
        {
          "name": "x",
          "label": "First number:",
          "type": "number"
        },
        {
          "name": "y",
          "label": "Second number:",
          "type": "number"
        }
      ],
      "starterCode": "",
      "hint": "Use <code>get_input('x')</code> and <code>get_input('y')</code> to get the numbers, then divide using <code>/</code>.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input('x')\ny = get_input('y')\nresult = x / y\nprint(result)"
          }
        ]
      }
    },
    {
      "title": "Add three inputs",
      "content": "Let's take it up a notch! Now we'll work with three input boxes.",
      "task": "Write code from scratch that takes 3 inputs and adds them all together.",
      "codeHeight": 6,
      "inputs": [
        {
          "name": "x",
          "label": "First number:",
          "type": "number"
        },
        {
          "name": "y",
          "label": "Second number:",
          "type": "number"
        },
        {
          "name": "z",
          "label": "Third number:",
          "type": "number"
        }
      ],
      "starterCode": "",
      "hint": "Use <code>get_input('x')</code>, <code>get_input('y')</code>, and <code>get_input('z')</code> to get all three numbers, then add them together.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input('x')\ny = get_input('y')\nz = get_input('z')\nresult = x + y + z\nprint(result)"
          }
        ]
      }
    },
    {
      "title": "Multiply three inputs",
      "content": "Now let's multiply all three inputs together.",
      "task": "Write code from scratch that takes 3 inputs and multiplies them all together.",
      "codeHeight": 6,
      "inputs": [
        {
          "name": "x",
          "label": "First number:",
          "type": "number"
        },
        {
          "name": "y",
          "label": "Second number:",
          "type": "number"
        },
        {
          "name": "z",
          "label": "Third number:",
          "type": "number"
        }
      ],
      "starterCode": "",
      "hint": "Use <code>get_input('x')</code>, <code>get_input('y')</code>, and <code>get_input('z')</code> to get all three numbers, then multiply them together using <code>*</code>.",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input('x')\ny = get_input('y')\nz = get_input('z')\nresult = x * y * z\nprint(result)"
          }
        ]
      }
    },
    {
      "title": "Powers of a number",
      "content": "In math, when we multiply a number by itself, we call it a 'power'. For example, 5 squared (5Â²) means 5 Ã— 5 = 25, and 5 cubed (5Â³) means 5 Ã— 5 Ã— 5 = 125. Let's create a program that shows all three: the original number, the number squared, and the number cubed!",
      "task": "<p>Write a program that takes one input and prints three lines: the original number, the number squared, and the number cubed.</p><p>Try different input numbers like 2, 3, 5, 0.5, and even negative numbers to see what happens!</p>",
      "codeHeight": 6,
      "inputs": [
        {
          "name": "x",
          "label": "Enter a number:",
          "type": "number"
        }
      ],
      "hint": "First get the input with <code>get_input('x')</code>. Then use three print statements: one for the original number, one for <code>x * x</code> (squared), and one for <code>x * x * x</code> (cubed).",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "x = get_input('x')\nprint(x)\nprint(x * x)\nprint(x * x * x)"
          }
        ]
      }
    },
    {
      "title": "Area of a square",
      "content": "So far we've used simple variable names like 'x'. But good programmers use descriptive names that explain what the variable represents! For a square, we'll use 'side_length' instead of 'x' to make our code clearer. The area of a square is found by multiplying the length of one side by itself. For example, if a square has sides of 5 units, its area is 5 Ã— 5 = 25 square units.",
      "task": "Write a program that calculates the area of a square. Use the descriptive variable name 'side_length' for the input.",
      "codeHeight": 5,
      "inputs": [
        {
          "name": "side_length",
          "label": "Enter the length of one side of the square:",
          "type": "number"
        }
      ],
      "starterCode": "side_length = get_input('side_length')",
      "hint": "Use <code>side_length = get_input('side_length')</code> to get the input, then multiply it by itself using <code>side_length * side_length</code> to calculate the area. Notice how 'side_length' is much clearer than 'x'!",
      "validation": {
        "rules": [
          {
            "type": "solution_code",
            "solutionCode": "side_length = get_input('side_length')\narea = side_length * side_length\nprint(area)"
          }
        ]
      }
         },
     {
       "title": "Perimeter of a square",
       "content": "Great! Now let's calculate the perimeter of a square. The perimeter is the total distance around the square - you add up all four sides. Since all sides of a square are equal, the perimeter is 4 times the length of one side. For example, if a square has sides of 5 units, its perimeter is 4 Ã— 5 = 20 units.",
       "task": "Write a program that calculates the perimeter of a square. Use the descriptive variable name 'side_length' for the input.",
       "codeHeight": 5,
       "inputs": [
         {
           "name": "side_length",
           "label": "Enter the length of one side of the square:",
           "type": "number"
         }
       ],
       "starterCode": "side_length = get_input('side_length')",
       "hint": "Use <code>side_length = get_input('side_length')</code> to get the input, then multiply it by 4 using <code>side_length * 4</code> to calculate the perimeter. Remember, perimeter = 4 Ã— side length!",
       "validation": {
         "rules": [
           {
             "type": "solution_code",
             "solutionCode": "side_length = get_input('side_length')\nperimeter = side_length * 4\nprint(perimeter)"
           }
         ]
       }
          },
     {
       "title": "Rectangle area and perimeter",
       "content": "<p>Now let's work with rectangles! A rectangle has two different sides - length and width. The area is length Ã— width, and the perimeter is 2 Ã— (length + width).</p><p>Why 2 Ã— (length + width)? Imagine you have to walk all the way around a rectangular room - you walk one length, then one width, then another length, then another width. So you walk length + width + length + width = 2 Ã— (length + width).</p><p>For example, a rectangle with length 6 and width 4 has area = 6 Ã— 4 = 24 and perimeter = 2 Ã— (6 + 4) = 2 Ã— 10 = 20.</p>",
       "task": "Write a program that calculates both the area and perimeter of a rectangle. Use descriptive variable names 'length' and 'width' for the inputs. Print the area on the first line and the perimeter on the second line.",
       "codeHeight": 7,
       "inputs": [
         {
           "name": "length",
           "label": "Enter the length of the rectangle:",
           "type": "number"
         },
         {
           "name": "width",
           "label": "Enter the width of the rectangle:",
           "type": "number"
         }
       ],
       "starterCode": "",
       "hint": "Get both inputs using <code>get_input('length')</code> and <code>get_input('width')</code>. Then calculate area with <code>length * width</code> and perimeter with <code>2 * (length + width)</code>. Print both results!",
       "validation": {
         "rules": [
           {
             "type": "solution_code",
             "solutionCode": "length = get_input('length')\nwidth = get_input('width')\narea = length * width\nperimeter = 2 * (length + width)\nprint(area)\nprint(perimeter)"
           }
         ]
       }
     },
     {
         "title": "Creative challenge",
       "content": "Write a program using one input & do something cool. Be creative! Show your teacher your code and your output.",
       "task": "Create a program that takes one input and does something interesting with it. You can use any of the concepts you've learned: variables, calculations, multiple print statements, etc.",
       "codeHeight": 8,
       "inputs": [
         {
           "name": "x",
           "label": "Enter a number:",
           "type": "number"
         }
       ],
       "starterCode": "x = get_input()\n",
       "hint": "Try combining different operations! You could calculate the input plus 5, minus 3, times 2, divided by 2, etc. Or create a pattern with multiple print statements.",
               "validation": {
          "rules": [
            {
              "type": "code_contains_regex",
              "pattern": "print\\s*\\("
            },
            {
              "type": "output_contains_regex",
              "pattern": "^(?!\\s*$).+"
            }
          ]
        }
     }
  ],
  "metadata": {
    "created": "2025-08-14"
  }
}
